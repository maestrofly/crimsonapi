const express = require('express')
const User = require('../models/user')
const Auth = require('../middleware/auth')

const router = new express.Router()

userSchema.methods.generateAuthToken = async function () {
    const user = this
     const token = jwt.sign({ _id: user._id.toString()},      process.env.JWT_SECRET)
 user.tokens = user.tokens.concat({token})
    await user.save()
    return token
 }

 //signup
router.post('/users', async (req, res) => {
    const user = new User(req.body)

    try {
        await user.save()
        const token = await user.generateAuthToken()
        res.status(201).send({user, token})
    } catch (error) {
        res.status(400).send(error)
    }
    })


    userSchema.pre('save', async function(next) {
        const user = this
           if (user.isModified('password')) {
           user.password = await bcrypt.hash(user.password, 8)
        }
          next()
        })


        userSchema.statics.findByCredentials = async (email, password) => {
            const user = await User.findOne({ email })
            if (!user) {
              throw new Error('Unable to log in')
            }
             const isMatch = await bcrypt.compare(password, user.password)
            if(!isMatch) {
               throw new Error('Unable to login')
            }
               return user
            }


            //login 

            router.post('/users/login', async (req, res) => {
                try {
                  const user = await User.findByCredentials(req.body.email,        req.body.password)
                  const token = await user.generateAuthToken()
                  res.send({ user, token})
                } catch (error) {
                  res.status(400).send(error)
                 }
                })

              //logout
                router.post('/users/logout', Auth, async (req, res) => {
                    try {
                        req.user.tokens =  req.user.tokens.filter((token) => {
                       return token.token !== req.token
                      })
                        await req.user.save()
                        res.send()
                    } catch (error) {
                        res.status(500).send()
                    }
                    })


                    //Logout All 
                    
                    router.post('/users/logoutAll', Auth, async(req, res) => {
                        try {
                           req.user.tokens = []
                           await req.user.save()
                           res.send()
                        } catch (error) {  
                           res.status(500).send()
                        }
                        })
                        module.exports = router